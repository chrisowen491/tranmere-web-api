AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Tranmere-Web-Api

  Sam scripts for tranmere-web
Parameters:
  Email:
    Type: String
    Description: The email address to send contact to
  ESCluster:
    Type: String
    Description: The email address to send contact to
  ESUser:
    Type: String
    Description: The email address to send contact to
  ESPassword:
    Type: String
    Description: The email address to send contact to

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 600

Resources:
  TranmereWebApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: TranmereWebApi Gateway
      StageName: Prod
      Domain:
        DomainName: api.tranmere-web.com
        CertificateArn: arn:aws:acm:us-east-1:559251280975:certificate/f3059bff-501c-4efc-83ea-21d9bc0f2500
        EndpointConfiguration: EDGE
      DefinitionBody:
        swagger: "2.0"
        info:
          description: "This api used to get access to the raw data that powers the site."
          version: "1.0"
          title:
            Ref: AWS::StackName
        tags:
          - name: "players"
            description: "Player information"
          - name: "results"
            description: "Match history"
        paths:
          "/player-search":
            get:
              tags:
                - "players"
              summary: "Find player appearances and goals by season"
              description: "Find player appearances and goals by season"
              operationId: "playerSearch"
              produces:
                - "application/json"
              parameters:
                - name: "season"
                  in: "query"
                  description: "The season to search from - leave empty for top players in all time stats"
                  required: false
                  type: "integer"
                  format: "int64"
                - name: "sort"
                  in: "query"
                  description: "Sort order of players"
                  required: false
                  default: "starts"
                  type: "string"
                  enum:
                    - "goals"
                    - "starts"
              responses:
                "200":
                  description: "Success"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PlayerSearchFunction.Arn}/invocations
          "/contact-us":
            post:
              tags:
                - "utility"
              summary: "Send a message to site admin"
              description: "Send a message to site admin"
              operationId: "contactUs"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              parameters:
                - name: "body"
                  in: "body"
                  description: "The type of page to generate"
                  required: true
                  schema:
                    type: object
              responses:
                "200":
                  description: "Success"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactUsFunction.Arn}/invocations
          "/profile/{player}":
            get:
              tags:
                - "players"
              summary: "Get a summary of information about a single player"
              description: "Get a summary of information about a single player"
              operationId: "getProfile"
              produces:
                - "application/json"
              parameters:
                - name: "player"
                  in: "path"
                  description: "The name of the player"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "Success"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProfileFunction.Arn}/invocations
          "/entities/{entity}/{category}/{attribute}":
            get:
              tags:
                - "utility"
              summary: "Simple utility API to return entities from the database"
              description: "Simple utility API to return entities from the database"
              operationId: "entitySearch"
              produces:
                - "application/json"
              parameters:
                - name: "entity"
                  in: "path"
                  description: "The name of the entity to search"
                  required: true
                  type: "string"
                  enum:
                    - player
                - name: "category"
                  in: "path"
                  description: "The name of the attribute to filter on"
                  required: true
                  type: "string"
                - name: "attribute"
                  in: "path"
                  description: "The attribute value to filter"
                  required: true
                  type: "string"
                - name: "indexName"
                  in: "query"
                  description: "An index to change the default sort "
                  required: false
                  type: "string"
              responses:
                "200":
                  description: "Success"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EntityFunction.Arn}/invocations
          "/page/{pageName}/{player}":
            get:
              tags:
                - "players"
              summary: "Generate a pre-rendered profile page"
              description: "Generate a pre-rendered profile page"
              operationId: "pageGeneration"
              produces:
                - "application/json"
              parameters:
                - name: "pageName"
                  in: "path"
                  description: "The type of page to generate"
                  required: true
                  type: "string"
                  enum:
                    - player
                - name: "player"
                  in: "path"
                  description: "The name of the player"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "Success"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PageFunction.Arn}/invocations
          "/result-search":
            get:
              tags:
                - "results"
              summary: "Find results by season, competition or opposition"
              description: "Find results by season, competition or opposition"
              operationId: "resultSearch"
              produces:
                - "application/json"
              parameters:
                - name: "season"
                  in: "query"
                  description: "The season to search from - leave empty for top players in all time stats"
                  required: false
                  type: "integer"
                  format: "int64"
                - name: "competition"
                  in: "query"
                  description: "The competition to search for"
                  required: false
                  type: "string"
                - name: "opposition"
                  in: "query"
                  description: "The opposition team for results"
                  required: false
                  type: "string"
                - name: "sort"
                  in: "query"
                  description: "Sort order of players"
                  required: false
                  default: "starts"
                  type: "string"
                  enum:
                    - "goals"
                    - "starts"
              responses:
                "200":
                  description: "Success"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResultsSearchFunction.Arn}/invocations


  TranmereWebCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: 'Common code used by lambdas'
      ContentUri: src/common-layer/
      CompatibleRuntimes:
        - nodejs12.x

  PlayerSearchFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/player-search/
      Handler: app.handler
      Runtime: nodejs12.x
      Tracing: Active
      Events:
        PageRequest:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /player-search
            RestApiId: !Ref TranmereWebApiGateway
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerSeasonSummary
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerTable
      Layers:
        - !Ref TranmereWebCommonLayer

  PageFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/page/
      Handler: app.handler
      Runtime: nodejs12.x
      Tracing: Active
      Events:
        PageRequest:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /page/{pageName}/{player}
            RestApiId: !Ref TranmereWebApiGateway
            Method: get
      Layers:
        - !Ref TranmereWebCommonLayer

  ScraperFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/scraper/
      Handler: app.handler
      Runtime: nodejs12.x
      Events:
        PageRequest:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /scraper/{season}/{id}
            RestApiId: !Ref TranmereWebApiGateway
            Method: get
      Layers:
        - !Ref TranmereWebCommonLayer

  PlayerBuilderFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/player-builder/
      Handler: app.handler
      Runtime: nodejs12.x
      Events:
        PageRequest:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /player-builder/{kit}/{hair}/{body}/{features}
            RestApiId: !Ref TranmereWebApiGateway
            Method: get
      Layers:
        - !Ref TranmereWebCommonLayer

  ContactUsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/contact-us/
      Handler: app.handler
      Runtime: nodejs12.x
      Policies:
        - AWSXrayWriteOnlyAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'ses:SendEmail'
                - 'ses:SendRawEmail'
              Resource: '*'
      Environment:
        Variables:
          EMAIL_ADDRESS: !Ref 'Email'
      Events:
        ContactRequest:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /contact-us
            RestApiId: !Ref TranmereWebApiGateway
            Method: post
      Layers:
        - !Ref TranmereWebCommonLayer

  PlayerCRUDFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/crud/
      Handler: app.playerHandler
      Runtime: nodejs12.x
      Events:
        PlayerPostAPI:
          Type: Api
          Properties:
            Path: /api-player
            Method: POST
            RestApiId: !Ref TranmereWebApiGateway
        PlayerGetByNameAPI:
          Type: Api
          Properties:
            Path: /api-player/{name}
            Method: GET
            RestApiId: !Ref TranmereWebApiGateway
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerTable
      Layers:
        - !Ref TranmereWebCommonLayer

  ResultsSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/results-search/
      Handler: app.entityHandler
      Runtime: nodejs12.x
      Tracing: Active
      Events:
        GetResults:
          Type: Api
          Properties:
            Path: /result-search
            Method: GET
            RestApiId: !Ref TranmereWebApiGateway
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebGames
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebGoals
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebApps
      Layers:
        - !Ref TranmereWebCommonLayer

  UpdateSummariesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/updateJob/
      Handler: app.handler
      Runtime: nodejs12.x
      Tracing: Active
      Events:
        Daily:
          Type: Schedule
          Properties:
            Schedule: cron(40 21 * * ? *)
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerSeasonSummary
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebGoals
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebApps
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerTable
      Layers:
        - !Ref TranmereWebCommonLayer

  ProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/profile/
      Handler: app.handler
      Runtime: nodejs12.x
      Tracing: Active
      Events:
        GetProfile:
          Type: Api
          Properties:
            Path: /profile/{player}
            Method: GET
            RestApiId: !Ref TranmereWebApiGateway
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerLinks
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerTransfers
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebApps
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerSeasonSummary
      Layers:
        - !Ref TranmereWebCommonLayer

  EntityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/entities/
      Handler: app.entityHandler
      Runtime: nodejs12.x
      Tracing: Active
      Events:
        GetEntitiesByCategoryAPI:
          Type: Api
          Properties:
            Path: /entities/{entity}/{category}/{attribute}
            Method: GET
            RestApiId: !Ref TranmereWebApiGateway
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebMediaTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerLinks
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerTransfers
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebManagers
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebStars
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebClubs
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebGames
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebGoals
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebApps
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebCompetitions
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerSeasonSummary
      Layers:
        - !Ref TranmereWebCommonLayer

  TranmereWebCSVUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: tranmere-web-csv-uploads

  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/upload/
      Handler: app.mediaHandler
      Runtime: nodejs12.x
      Events:
        UploadMediaEvent:
          Type: S3
          Properties:
            Bucket: !Ref TranmereWebCSVUploadBucket
            Events: s3:ObjectCreated:*
      Policies:
        - S3ReadPolicy:
            BucketName: tranmere-web-csv-uploads
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebMediaTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerLinks
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerTransfers
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebManagers
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebPlayerTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebStars
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebClubs
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebGames
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebGoals
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebApps
        - DynamoDBCrudPolicy:
            TableName: !Ref TranmereWebCompetitions

  TranmereWebPlayerTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebPlayerTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  TranmereWebMediaTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebMediaTable
      AttributeDefinitions:
        - AttributeName: category
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: category
          KeyType: HASH
        - AttributeName: id
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  TranmereWebPlayerLinks:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebPlayerLinks
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: id
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  TranmereWebPlayerTransfers:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebPlayerTransfers
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: id
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  TranmereWebManagers:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebManagers
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: id
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  TranmereWebClubs:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebClubs
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: id
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  TranmereWebCompetitions:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebCompetitions
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: id
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  TranmereWebStars:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebStars
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: id
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  TranmereWebGames:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebGames
      AttributeDefinitions:
        - AttributeName: season
          AttributeType: S
        - AttributeName: date
          AttributeType: S
        - AttributeName: competition
          AttributeType: S
        - AttributeName: venue
          AttributeType: S
        - AttributeName: opposition
          AttributeType: S
        - AttributeName: static
          AttributeType: S
        - AttributeName: attendance
          AttributeType: N
      KeySchema:
        - AttributeName: season
          KeyType: HASH
        - AttributeName: date
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: AttendanceIndex
          KeySchema:
            - AttributeName: static
              KeyType: HASH
            - AttributeName: attendance
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
        - IndexName: CompetitionIndex
          KeySchema:
            - AttributeName: competition
              KeyType: HASH
            - AttributeName: date
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
        - IndexName: OppositionIndex
          KeySchema:
            - AttributeName: opposition
              KeyType: HASH
            - AttributeName: date
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
        - IndexName: VenueIndex
          KeySchema:
            - AttributeName: venue
              KeyType: HASH
            - AttributeName: date
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL

  TranmereWebApps:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebAppsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: Season
          AttributeType: S
        - AttributeName: Name
          AttributeType: S
        - AttributeName: Date
          AttributeType: S
      KeySchema:
        - AttributeName: Season
          KeyType: HASH
        - AttributeName: id
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: ByPlayerIndex
          KeySchema:
            - AttributeName: Name
              KeyType: HASH
            - AttributeName: Date
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL

  TranmereWebPlayerSeasonSummary:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebPlayerSeasonSummaryTable
      AttributeDefinitions:
        - AttributeName: Player
          AttributeType: S
        - AttributeName: Season
          AttributeType: S
      KeySchema:
        - AttributeName: Season
          KeyType: HASH
        - AttributeName: Player
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: ByPlayerIndex
          KeySchema:
            - AttributeName: Player
              KeyType: HASH
            - AttributeName: Season
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true

  TranmereWebGoals:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: TranmereWebGoalsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: Season
          AttributeType: S
      KeySchema:
        - AttributeName: Season
          KeyType: HASH
        - AttributeName: id
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST

Outputs:
  ContactUsFunction:
    Description: "Contact Us Lambda Function ARN"
    Value: !GetAtt ContactUsFunction.Arn
  ContactUsFunctionIamRole:
    Description: "Implicit IAM Role created for Contact Us function"
    Value: !GetAtt ContactUsFunctionRole.Arn
